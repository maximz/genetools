# Checkout or python install don't carry between jobs. In fresh job, will default to empty directory and python 3.8
# Env variables are all strings

name: CI

on: [push, pull_request]
env:
  # this will be converted to a string "true" or "false"
  MASTER_PUSH: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
  # create env var that is "true" if this is a PR and if it targets master
  IS_PR_TARGETING_MASTER: ${{ github.event_name == 'pull_request' && github.base_ref == 'master' }}

jobs:
  tests:
    runs-on: ubuntu-latest
    strategy:
      # don't abort all other jobs
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get Python version
        run: python --version
      - name: Cache pip
        uses: actions/cache@v3.0.1
        with:
          # This path is specific to Ubuntu
          path: ~/.cache/pip
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements_dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Cache precommit
        uses: actions/cache@v3.0.1
        with:
          path: ~/.cache/pre-commit
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-precommit-${{matrix.python-version}}-${{ hashFiles('.pre-commit-config.yaml') }}
      - name: Install dependencies
        # pin setuptools to allow louvain install on py3.9: https://stackoverflow.com/a/69100830/130164 and https://github.com/pypa/setuptools/issues/2086
        run: |
          python -m pip install --upgrade pip wheel 'setuptools<58'
          pip install -r requirements_dev.txt
          pip install -U codecov
      - name: Lint
        run: |
            pre-commit install
            pre-commit run --all-files --show-diff-on-failure

      # - name: Log github environment
      #   # https://github.com/hmarr/debug-action
      #   uses: hmarr/debug-action@v2
      # # https://docs.github.com/en/actions/learn-github-actions/contexts#example-printing-context-information-to-the-log-file
      # - name: Dump GitHub context
      #   env:
      #     GITHUB_CONTEXT: ${{ toJSON(github) }}
      #   run: echo "$GITHUB_CONTEXT"
      # - name: Dump job context
      #   env:
      #     JOB_CONTEXT: ${{ toJSON(job) }}
      #   run: echo "$JOB_CONTEXT"
      # - name: Dump steps context
      #   env:
      #     STEPS_CONTEXT: ${{ toJSON(steps) }}
      #   run: echo "$STEPS_CONTEXT"
      # - name: Dump runner context
      #   env:
      #     RUNNER_CONTEXT: ${{ toJSON(runner) }}
      #   run: echo "$RUNNER_CONTEXT"
      # - name: Dump strategy context
      #   env:
      #     STRATEGY_CONTEXT: ${{ toJSON(strategy) }}
      #   run: echo "$STRATEGY_CONTEXT"
      # - name: Dump matrix context
      #   env:
      #     MATRIX_CONTEXT: ${{ toJSON(matrix) }}
      #   run: echo "$MATRIX_CONTEXT"

      - name: Log our custom environment variables
        run: echo "$IS_PR_TARGETING_MASTER" "$MASTER_PUSH"
      - name: Run tests
        # use temporary directory cleaned up after every job
        run: pytest --basetemp={runner.temp} --cov=./ --cov-report xml --mpl --mpl-results-path=tests/results
        env:
          MPLBACKEND: Agg
      - name: Upload pytest test result artifacts on failure
        uses: actions/upload-artifact@v2
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: tests/results
        if: ${{ failure() }}
      - name: Upload coverage on success
        uses: codecov/codecov-action@v1
        if: ${{ success() }}

  docs:
    # can we avoid rebuilding netlify cli docker image every time? https://github.com/netlify/actions/issues/19
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        # pin setuptools to allow louvain install on py3.9: https://stackoverflow.com/a/69100830/130164 and https://github.com/pypa/setuptools/issues/2086
        run: |
          python -m pip install --upgrade pip wheel 'setuptools<58'
          pip install -r requirements_dev.txt
      - name: make docs
        run: make docs
      - name: deploy dev docs to netlify
        if: ${{ env.MASTER_PUSH != 'true' }}
        uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.DEV_NETLIFY_SITE_ID }}
        with:
          args: deploy --dir="docs/_build/html"
        timeout-minutes: 5
      - name: deploy prod docs to netlify
        if: ${{ env.MASTER_PUSH == 'true' }}
        uses: netlify/actions/cli@master
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.PROD_NETLIFY_SITE_ID }}
        with:
          args: deploy --dir="docs/_build/html" --prod
        timeout-minutes: 5

  pypi:
    runs-on: ubuntu-latest
    needs: [tests, docs]
    # can't use env here yet because not defined
    # if: env.MASTER_PUSH == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        # pin setuptools to allow louvain install on py3.9: https://stackoverflow.com/a/69100830/130164 and https://github.com/pypa/setuptools/issues/2086
        run: |
          python -m pip install --upgrade pip wheel 'setuptools<58'
          pip install -r requirements_dev.txt
          pip install build
      - name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel --outdir dist/ .

      # Test PyPI is a nice idea but they don't allow overwriting a version number either.
      # - name: Publish distribution to Test PyPI
      #   uses: pypa/gh-action-pypi-publish@master
      #   with:
      #     user: __token__
      #     password: ${{ secrets.TEST_PYPI_API_TOKEN }}
      #     repository_url: https://test.pypi.org/legacy/

      - name: Publish package
        # TODO: other metadata for pypi
        uses: pypa/gh-action-pypi-publish@master
        if: ${{ env.MASTER_PUSH == 'true' }}
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
